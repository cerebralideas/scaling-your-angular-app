# Scaling Your AngularJS App

"We're Not in Kansas Anymore!"

## What I Learned While Halfing the Time to Load

Initial build:

- Ready event: 1.1 sec
- Load event: 1.7 sec
- Completion: 1.8 sec

Refactored build*:

- Ready event: 395 ms
- Load event: 663 ms
- Completion: 1.3 sec

* Same features, just better architected and written

## My Suggested Practices for Moving Beyond the Todo App

Warning:

- This is not dogma.
- This is not a one-size fits all.
- Don't just blindly follow advice, especially mine.

## Suggestion #1: Hybridization

Performance is one of our top priority metrics! So, the question then arises, "Is the client (browser) ready for the full management of a large application?"

### Not Yet, The Client Needs Help

A lesson from Twitter, and their "time to first tweet."

### Big Changes; Small Changes

The server responsible for first load and major section changes within the application.

We then have Angular responsible for all subsections and widgets.

## Suggestion #2: Asynchrony

Sometimes moving your code from the head to the footer is not enough. For those times, asynchronous script loaders are full of win.

This takes advantage of non-blocking parallelization and ASAP type execution.

### The Asynchronous Challenges

Bootstrapping and statically-loaded-data becomes a bit more difficult.

### How We Solved the Bootstrapping Issue

	yepnope([
		{
			// Let's load the global Angular files. All files using the "load" method load in parallel
			// but execute in order listed.
			load: {
				globalServices: '/src/js/services/serv-global.js',
				globalDirectives: '/src/js/directives/dir-global.js',
				globalController: '/src/js/controllers/ctrlr-global.js'
			}
		},
		{
			// Let's load the section specific files
			test: (location.indexOf('patients') !== -1),
			yep: '/src/js/controllers/ctrlr-patient.js',
			complete: function () {

				console.log('patients loaded');

				// Now bootstrap this app!
				angular.bootstrap(document, ['PAS']);
			}
		},
	]);

### How We Solved the Statically Loaded Data Issue

Dependency injection is KING!

	<?php // Inject PHP service ?>
	
	<script type="text/javascript">

		(function () {
			var PAS = angular.module('PAS', [], function ($routeProvider) {

				'use strict';

				// Route logic
				
			}).
			factory('globalData', [function () {

				'use strict';

				// This will be the data object for passing global data to the client
				// from the server for initial binding.
				var data = {};

				// Capture user data
				data.user = <?php echo $userService->getUserJson(); ?>;

				// Capture admins from DB
				data.profs = <?php echo $providerService->getProvidersJson(); ?>;

				return data;
			}]);
	</script>

## Suggestion #3: Split Up Your Code

### The Basics:

- main.js
- controller.js
- service.js
- directive.js
- filter.js

### Level Up:

ctrlr-patient.js:

PAS.controller('PtHeader', [

		'$scope', 'dataServices',
	
		function ctrlrPtHeader($scope, dataServices) {
	
			"use strict";
	
			// $scope stuff
		}]).

	controller('PtSearch', [

		'$scope', 'dataServices',

		function ctrlrPtSearch($scope, dataServices) {

		"use strict";
		
		// $scope stuff
	}]);

## Suggestion #4: Limiting the Responsibility of Your Controllers

Controllers are the lifeblood of your application, but they can also become easily bloated and non-performant if you're not careful.

### Small footprints FTW!

Controllers should be responsible for widgets, not pages.

### Avoid DOM Manipulation

- DOM manipulation is expensive
- Let Angular handle the DOM; you worry about the data.

### Limit Your Business Logic

- Avoid business logic in Controllers
- Move it to your Services

### $scope It Right!

Controllers create scope (or $scope) which is digested *at least once** at each user interaction that potentially modifies data.

Be careful, and ONLY attach things the view will need to the $scope.

## Suggestion #5: Move Data Mgmt to Services

Controllers should not be responsible for your "model". Utilize a "data service" to manage your model.

### API All the Things!

Because Angular provides us with the power of DI, we can easily just include this "data service" into anything that needs access.

	PAS.factory('dataServices', [

		'$http', '$rootScope', 'globalData', 'sectionData',

		function ($http, $rootScope, globalData, sectionData) {

			'use strict';

			var dataModel = {

					globalData: globalData,
					sectionData: sectionData
				};

			return { // Data service API

				save: function saveService(data, type, value) {

					// Do some logic

					return $http.post(url, data).

							success(function (data, status) {

								// Yay, success!

							}).error(function (data, status) {

								// Opps, failure :(
							});
				},

				query: function queryService(dataType, url) {

					if (url) {

						return $http.get(url).

								success(function (data, status) {

								// Yay, success!

							}).error(function (data, status) {

								// Opps, failure :(
							});
					} else {

						return dataModel[dataType];
					}
				},

### Dependency Injection is Our Unicorn

	controller('PtSearch', [

		'$scope', 'dataServices',
	
		function ctrlrPtSearch($scope, dataServices) {
	
			"use strict";
	
			var ptData = dataServices.query('sectionData');
	
			$scope.ptList = ptData.ptList;

### $broadcast Your Changes

If your data changes in a way that is not observed by Angular, use your $broadcast to notify any listeners that things have changed.

	// From your data service
	$rootScope.$broadcast('refreshData');

	// A controller can listen in for this event
	$scope.$on('refreshData', function () {

		ptData = dataServices.query('sectionData');

		$scope.ptInfo = ptData.ptInfo;
	});










